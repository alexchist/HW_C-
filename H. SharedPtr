#include <optional>

struct Base_Counter {
    size_t count_shared_ptr = 0;
    size_t count_weak_ptr = 0;
};

struct Counter {
    Base_Counter base;

    Counter() {
        base = Base_Counter();
        base.count_weak_ptr = 0;
        base.count_shared_ptr = 0;
    }

    Counter(const Counter* other) : base(other->base) {}


    void increase_shared_ptr() {
        ++base.count_shared_ptr;
    }

    void decrease_shared_ptr() {
        --base.count_shared_ptr;
    }

    void increase_weak_ptr() {
        ++base.count_weak_ptr;
    }

    void decrease_weak_ptr() {
        --base.count_weak_ptr;

    }

    size_t get_count_shared_ptr() const {
        return base.count_shared_ptr;
    }

    size_t get_weak_shared_ptr() const {
        return base.count_weak_ptr;
    }

    virtual void deallocate() = 0;

    virtual void delete_el() = 0;

    virtual ~Counter() = default;
};

template<typename T, typename Allocator = std::allocator<T>>
struct AllocatorAwareCounter : Counter {
    Allocator alloc;
    std::optional<T> el;

    template<class... Args>
    AllocatorAwareCounter(const Allocator& allocator, Args&& ... args): alloc(allocator) {
        el.template emplace(std::forward<Args>(args)...);
    }

    void delete_el() override {
        el.reset();
    }

    void deallocate() override {
        using new_alloc = typename std::allocator_traits<Allocator>::template rebind_alloc<AllocatorAwareCounter<T, Allocator>>;
        new_alloc arg_alloc(alloc);
        std::allocator_traits<new_alloc>::destroy(arg_alloc, this);
        std::allocator_traits<new_alloc>::deallocate(arg_alloc, this, 1);
    }
};

template<typename T, typename Deleter = std::default_delete<T>, typename Allocator = std::allocator<T>>
struct DeleterAwareCounter : Counter {
    Deleter deleter;
    Allocator alloc;
    T* el;

    using ControlPointerAllocator =
            typename std::allocator_traits<Allocator>::template rebind_alloc<DeleterAwareCounter<T, Deleter, Allocator>>;

    DeleterAwareCounter(T* el, const Deleter& deleter, const Allocator& alloc) : deleter(deleter), alloc(alloc),
                                                                                 el(el) {}

    void delete_el() override {
        deleter(el);
        el = nullptr;
    }

    void deallocate() override {
        ControlPointerAllocator pointer_alloc(alloc);
        std::allocator_traits<ControlPointerAllocator>::deallocate(pointer_alloc, this, 1);
    }
};


template<class T>
class WeakPtr;

template<typename T>
class EnableSharedFromThis;

template<class T>
class SharedPtr {
    friend class WeakPtr<T>;

    template<typename U>
    friend class WeakPtr;

    template<typename U>
    friend class SharedPtr;

    template<typename U, typename ... Args, typename Allocator>
    friend SharedPtr<U> allocateShared(const Allocator& alloc, Args&& ... args);

private:
    Counter* counter = nullptr;
    T* el = nullptr;

    SharedPtr(T& arg_ptr, Counter* counter) : counter(counter), el(&arg_ptr) {
        if constexpr (std::is_base_of_v<EnableSharedFromThis<T>, T>) {
            el->wp = *this;
        }
        counter->increase_shared_ptr();
        counter->increase_weak_ptr();
    }

public:
    SharedPtr() = default;

    SharedPtr(const WeakPtr<T>& argument) : counter(argument.counter), el(nullptr) {
        if (argument.expired()) {
            throw std::bad_weak_ptr{};
        }
        counter->increase_shared_ptr();
    }

    SharedPtr(const SharedPtr& other) : counter(other.counter), el(other.el) {
        if (counter) {
            counter->increase_shared_ptr();
        }
    }

    template<typename U>
    SharedPtr(SharedPtr<U>&& other): counter(std::move(other.counter)), el(std::move(other.el)) {
        other.counter = nullptr;
        other.el = nullptr;
    }

    SharedPtr(SharedPtr&& other) noexcept: counter(std::move(other.counter)), el(std::move(other.el)) {
        other.counter = nullptr;
        other.el = nullptr;
    }

    template<typename U>
    SharedPtr(const SharedPtr<U>& other): counter(other.counter), el(other.el) {
        counter->increase_shared_ptr();
    }

    template<typename U, typename Deleter = std::default_delete<U>, typename Allocator = std::allocator<U>>
    SharedPtr(U* el, const Deleter& del, const Allocator& alloc): el(el) {
        using ControlPointerAllocator =
                typename std::allocator_traits<Allocator>::template rebind_alloc<DeleterAwareCounter<U, Deleter, Allocator>>;
        ControlPointerAllocator pointer_alloc(alloc);
        auto* new_block = std::allocator_traits<ControlPointerAllocator>::allocate(pointer_alloc, 1);
        if constexpr (std::is_base_of_v<EnableSharedFromThis<U>, U>) {
            el->wp = *this;
        }
        if (!std::is_same_v<Allocator, std::allocator<T>>) {
            new(new_block) DeleterAwareCounter<U, Deleter, Allocator>(el, del, alloc);
            counter = new_block;
        } else {
            std::allocator_traits<ControlPointerAllocator>::construct(
                    pointer_alloc, new_block, el, del, alloc);
            counter = new_block;
        }
        counter->increase_weak_ptr();
        counter->increase_shared_ptr();
    }

    template<typename U>
    SharedPtr(U* pointer): SharedPtr(pointer, std::default_delete<U>(), std::allocator<U>()) {}

    template<typename U, typename Deleter = std::default_delete<U>>
    SharedPtr(U* pointer, const Deleter& del): SharedPtr(pointer, del, std::allocator<U>()) {}

    SharedPtr& operator=(const SharedPtr& shared_ptr) {
        SharedPtr<T>(shared_ptr).swap(*this);
        return *this;
    }

    template<typename U>
    SharedPtr<T>& operator=(const SharedPtr<U>& shared_ptr) {
        SharedPtr<T>(shared_ptr).swap(*this);
        return *this;
    }


    template<typename U>
    SharedPtr<T>& operator=(SharedPtr<U>&& shared_ptr) {
        SharedPtr<T>(std::move(shared_ptr)).swap(*this);
        return *this;
    }

    SharedPtr& operator=(SharedPtr&& shared_ptr) {
        SharedPtr<T>(std::move(shared_ptr)).swap(*this);
        return *this;
    }

    ~SharedPtr() {
        if (!counter) return;
        if (counter->get_count_shared_ptr() > 0) {
            counter->decrease_shared_ptr();
        }
        if (counter->get_count_shared_ptr() == 0) {
            counter->delete_el();
            counter->decrease_weak_ptr();

            if (counter->get_weak_shared_ptr() == 0) {
                counter->deallocate();
            }
        }
    }


    T& operator*() const {
        return *el;
    }

    T& operator*() {
        return *el;
    }

    T* operator->() const {
        return el;
    }

    size_t use_count() const {
        return counter->get_count_shared_ptr();
    }


    void swap(SharedPtr& argument) noexcept {
        std::swap(el, argument.el);
        std::swap(counter, argument.counter);
    }

    template<typename U>
    void reset(U* new_el) {
        SharedPtr<T> new_ptr(new_el);
        swap(new_ptr);
    }

    void reset() {
        SharedPtr().swap(*this);
    }

    T* get() const {
        return el;
    }
};

template<class T>
class WeakPtr {
    template<typename U>
    friend class SharedPtr;

    template<typename U>
    friend class WeakPtr;

private:
    Counter* counter = nullptr;
public:
    WeakPtr() = default;

    template<typename U>
    WeakPtr(const SharedPtr<U>& argument): counter(static_cast<Counter*>(argument.counter)) {
        if (counter) {
            counter->increase_weak_ptr();
        }
    }

    WeakPtr(const WeakPtr& argument) : counter(argument.counter) {
        if (counter) {
            counter->increase_weak_ptr();
        }
    }

    template<typename U>
    WeakPtr(const WeakPtr<U>& argument): counter(argument.counter) {
        counter->increase_weak_ptr();
    }

    WeakPtr(WeakPtr&& argument) noexcept: counter(std::move(argument.counter)) {
        argument.counter = nullptr;
    }

    template<typename U>
    WeakPtr(WeakPtr<U>&& argument) noexcept: counter(std::move(argument.counter)) {
        argument.counter = nullptr;
    }

    void swap(WeakPtr& argument) {
        std::swap(counter, argument.counter);
    }

    bool expired() const {
        if (counter == nullptr) return true;
        return counter->get_count_shared_ptr() == 0;
    }

    template<typename U>
    WeakPtr& operator=(const WeakPtr<U>& argument) {
        WeakPtr<T>(argument).swap(*this);
        return *this;
    }

    WeakPtr& operator=(const WeakPtr& argument) {
        WeakPtr<T>(argument).swap(*this);
        return *this;;
    }

    WeakPtr& operator=(const SharedPtr<T>& argument) {
        WeakPtr<T>(argument).swap((*this));
        return *this;
    }

    template<typename U>
    WeakPtr& operator=(WeakPtr<U>&& argument) {
        WeakPtr<T>(std::move(argument)).swap(*this);
        return *this;
    }

    WeakPtr& operator=(WeakPtr&& argument) {
        WeakPtr<T>(std::move(argument)).swap(*this);
        return *this;
    }

    SharedPtr<T> lock() const {
        return expired() ? SharedPtr<T>() : SharedPtr<T>(*this);
    }

    size_t use_count() const {
        return counter->get_count_shared_ptr();
    }

    ~WeakPtr() {
        if (counter == nullptr) return;
        if (counter->get_weak_shared_ptr() > 0) {
            counter->decrease_weak_ptr();
        }
        if (counter->get_weak_shared_ptr() == 0 && counter->get_count_shared_ptr() == 0) {
            counter->deallocate();
        }
    }
};

template<typename T, typename ... Args, typename Allocator>
SharedPtr<T> allocateShared(const Allocator& alloc, Args&& ... args) {
    using AwareAllocator =
            typename std::allocator_traits<Allocator>::template rebind_alloc<AllocatorAwareCounter<T, Allocator>>;
    AwareAllocator alloc_el(alloc);
    auto* new_counter = std::allocator_traits<AwareAllocator>::allocate(alloc_el, 1);
    std::allocator_traits<AwareAllocator>::construct(alloc_el, new_counter, alloc, std::forward<Args>(args)...);
    return SharedPtr<T>((new_counter->el).value(), new_counter);
}

template<typename T, typename ... Args>
SharedPtr<T> makeShared(Args&& ... args) {
    return allocateShared<T>(std::allocator<T>(), std::forward<Args>(args)...);
}

template<typename T>
class EnableSharedFromThis {
    WeakPtr<T> wp;

    template<typename U>
    friend class SharedPtr;

public:
    SharedPtr<T> shared_from_this() const {
        if (wp.expired()) {
            throw std::bad_weak_ptr{};
        }
        return wp.lock();
    }
};
